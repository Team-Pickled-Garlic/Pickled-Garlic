{% extends "layout.html.twig" %}

{% block content %}
<div class="container">
    <h2>iCalendar Generator</h2>

    <div class="row mt-4">
        <div class="col">
            <h3>List of Events</h3>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-sm btn-info" onclick="" title="Add event" data-toggle="modal"
                data-target="#add-event-modal">+ Add Event</button>
            <button type="button" class="btn btn-sm btn-outline-primary no-hover" onclick=""
                title="Add events before generating" disabled>Generate .ics</button>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-md">
            <table id="events-table" class="table table-striped">
                <thead>
                    <th>Event Name</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Location</th>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>

    <div class="modal fade" id="add-event-modal" data-backdrop="static" tabindex="-1" role="dialog"
        aria-labelledby="event-modal-title" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="event-modal-title">Create Event</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form id="event-form">
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Event Name</label>
                            <input required type="text" class="form-control" name="eventName" required>
                        </div>
                        <div class="form-group">
                            <label>Date Start</label>
                            <div class="input-group">
                                <input id="start-date" type="text" class="form-control readonly inherit-height"
                                    name="startDate" required>
                                <div class="input-group-append">
                                    <button id="show-start-date-picker" class="btn btn-secondary" type="button">
                                        <img src="/assets/icons8-calendar-24.png">
                                    </button>
                                </div>
                            </div>
                            <div id="start-date-picker"></div>
                        </div>
                        <div class="form-group">
                            <label>Date End</label>
                            <div class="input-group">
                                <input id="end-date" type="text" class="form-control readonly inherit-height"
                                    name="endDate">
                                <div class="input-group-append">
                                    <button id="show-end-date-picker" class="btn btn-secondary" type="button">
                                        <img src="/assets/icons8-calendar-24.png">
                                    </button>
                                </div>
                            </div>
                            <div id="end-date-picker"></div>
                        </div>
                        <div class="form-group">
                            <label>Location</label>
                            <input type="text" class="form-control" name="eventLocation">
                        </div>
                        <div class="form-group">
                            <label>Description</label>
                            <textarea class="form-control modal-event-desc" name="eventDesc"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add Event</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

</div>
<script>
    let download = (filename, text) => {
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
        element.setAttribute('download', filename);

        element.style.display = 'none';
        document.body.appendChild(element);

        element.click();

        document.body.removeChild(element);
    }

    let downloadTest = () => {
        let testEvent = new ICalendarGenerator('Study for Exam', '03-13-2020', '10:00:00', '13:00:00', 'Hamilton Library');
        download('test.ics', testEvent.generateCal());
    }

    // Does not let any user input in text field
    // Used to combine both readonly and required
    $('.readonly').on('keydown paste', function (e) {
        e.preventDefault();
    });

    // 'Placeholder' for ICalendar object
    var events = [];

    $(document).ready(function () {
        // Renders tables with class 'data-table' as a DataTable
        var eventTable = $('#events-table').DataTable({
            "dom": '<rt><"row"<"col"i><"col"p>>',
            "lengthMenu": [[-1], ["All"]],
            "language": {
                "emptyTable": "No events added"
            }
        });

        // When the create event form is submitted
        $('#event-form').on('submit', function (e) {
            e.preventDefault();
            let params = new URLSearchParams($(this).serialize());
            let event = {
                "eventName": params.get('eventName'),
                "startDate": params.get('startDate'),
                "endDate": params.get('endDate').length > 0 ? params.get('endDate') : params.get('startDate'),
                "eventLocation": params.get('eventLocation'),
                "eventDesc": params.get('eventDesc')
            }
            events.push(event);

            // Clear Form
            $(this).trigger('reset');

            // Push event data to event table
            eventTable.row.add([
                event.eventName,
                event.startDate,
                event.endDate,
                event.eventLocation
            ]).draw(false);
        });

        // Creates the WindowDatePicker for start date
        const startDatePicker = new WindowDatePicker({
            dateType: 'MM/DD/YYYY',
            hourType: '24',
            orientation: true,
            el: '#start-date-picker',
            toggleEl: '#show-start-date-picker',
            inputEl: '#start-date',
            type: 'DATEHOUR'
        });

        // Creates WindowDatePicker for end date
        const endDatePicker = new WindowDatePicker({
            dateType: 'MM/DD/YYYY',
            hourType: '24',
            orientation: true,
            el: '#end-date-picker',
            toggleEl: '#show-end-date-picker',
            inputEl: '#end-date',
            type: 'DATEHOUR'
        });
    });
</script>
{% endblock content%}