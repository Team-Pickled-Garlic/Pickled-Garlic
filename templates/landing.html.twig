{% extends "layout.html.twig" %}

{% block content %}
<div class="container-fluid">
    <h2>iCalendar Generator</h2>
    <div id="top-warning" class="alert alert-warning collapse" role="alert"><svg class="bi bi-info-circle-fill"
            width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd"
                d="M8 16A8 8 0 108 0a8 8 0 000 16zm.93-9.412l-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM8 5.5a1 1 0 100-2 1 1 0 000 2z"
                clip-rule="evenodd" />
        </svg> Please add events and select timezone before generating .ICS file.</div>
    <div class="row mt-4">
        <div class="col">
            <h3>List of Events</h3>
        </div>
    </div>

    <div class="row">
        <div class="col-9">
            <button type="button" class="btn btn-sm btn-info" onclick="" title="Add event" data-toggle="modal"
                data-target="#add-event-modal">+ Add Event</button>
            <button id="generate-button" type="button" class="btn btn-sm btn-outline-primary "
                title="Add events and select timezone before generating" disabled>Generate .ics</button>
        </div>
        <div class="col-3">
            <select class="custom-select mr-sm-2" id="tz-select">
                <option value="0" selected>Select Timezone</option>
                <option value="Etc/GMT+12">-12:00 Etc/GMT+12</option>
                <option value="Pacific/Pago_Pago">-11:00 Pacific/Pago_Pago</option>
                <option value="America/Adak">-11:00 America/Adak (DST)</option>
                <option value="Pacific/Honolulu">-10:00 Hawaii Time</option>
                <option value="Pacific/Marquesas">-09:30 Pacific/Marquesas</option>
                <option value="Pacific/Gambier">-09:00 Pacific/Gambier</option>
                <option value="America/Anchorage">-09:00 Alaska Time (DST)</option>
                <option value="America/Los_Angeles">-08:00 Pacific Time (DST)</option>
                <option value="Pacific/Pitcairn">-08:00 Pacific/Pitcairn</option>
                <option value="America/Phoenix">-07:00 Mountain Time - Arizona</option>
                <option value="America/Denver">-07:00 Mountain Time (DST)</option>
                <option value="America/Guatemala">-06:00 America/Guatemala</option>
                <option value="America/Chicago">-06:00 Central Time (DST)</option>
                <option value="Pacific/Easter">-06:00 Pacific/Easter (DST)</option>
                <option value="America/Bogota">-05:00 America/Bogota</option>
                <option value="America/New_York">-05:00 Eastern Time (DST)</option>
                <option value="America/Caracas">-04:30 America/Caracas</option>
                <option value="America/Halifax">-04:00 America/Halifax (DST)</option>
                <option value="America/Santo_Domingo">-04:00 America/Santo_Domingo</option>
                <option value="America/Asuncion">-04:00 America/Asuncion (DST)</option>
                <option value="America/Cuiaba">-04:00 America/Cuiaba (DST)</option>
                <option value="America/St_Johns">-03:30 America/St_Johns (DST)</option>
                <option value="America/Godthab">-03:00 America/Godthab (DST)</option>
                <option value="America/Argentina/Buenos_Aires">-03:00 America/Argentina/Buenos_Aires</option>
                <option value="America/Montevideo">-03:00 America/Montevideo (DST)</option>
                <option value="America/Sao_Paulo">-03:00 America/Sao_Paulo (DST)</option>
                <option value="America/Noronha">-02:00 America/Noronha</option>
                <option value="Etc/GMT+2">-02:00 Etc/GMT+2 (DST)</option>
                <option value="Atlantic/Azores">-01:00 Atlantic/Azores (DST)</option>
                <option value="Atlantic/Cape_Verde">-01:00 Atlantic/Cape_Verde</option>
                <option value="Etc/UTC">00:00 Etc/UTC</option>
                <option value="Europe/London">00:00 Europe/London (DST)</option>
                <option value="Europe/Berlin">+01:00 Europe/Berlin (DST)</option>
                <option value="Africa/Lagos">+01:00 Africa/Lagos</option>
                <option value="Africa/Windhoek">+01:00 Africa/Windhoek (DST)</option>
                <option value="Asia/Beirut">+02:00 Asia/Beirut (DST)</option>
                <option value="Africa/Johannesburg">+02:00 Africa/Johannesburg</option>
                <option value="Europe/Moscow">+03:00 Europe/Moscow (DST)</option>
                <option value="Asia/Baghdad">+03:00 Asia/Baghdad</option>
                <option value="Asia/Tehran">+03:30 Asia/Tehran (DST)</option>
                <option value="Asia/Dubai">+04:00 Asia/Dubai</option>
                <option value="Asia/Yerevan">+04:00 Asia/Yerevan (DST)</option>
                <option value="Asia/Kabul">+04:30 Asia/Kabul</option>
                <option value="Asia/Yekaterinburg">+05:00 Asia/Yekaterinburg (DST)</option>
                <option value="Asia/Karachi">+05:00 Asia/Karachi</option>
                <option value="Asia/Calcutta">+05:30 Asia/Kolkata</option>
                <option value="Asia/Katmandu">+05:45 Asia/Kathmandu</option>
                <option value="Asia/Dhaka">+06:00 Asia/Dhaka</option>
                <option value="Asia/Omsk">+06:00 Asia/Omsk (DST)</option>
                <option value="Asia/Rangoon">+06:30 Asia/Rangoon</option>
                <option value="Asia/Krasnoyarsk">+07:00 Asia/Krasnoyarsk (DST)</option>
                <option value="Asia/Jakarta">+07:00 Asia/Jakarta</option>
                <option value="Asia/Shanghai">+08:00 Asia/Shanghai</option>
                <option value="Asia/Singapore">+08:00 Asia/Singapore</option>
                <option value="Australia/Perth">+08:00 Australia/Perth</option>
                <option value="Asia/Irkutsk">+08:00 Asia/Irkutsk (DST)</option>
                <option value="Australia/Eucla">+08:45 Australia/Eucla</option>
                <option value="Asia/Yakutsk">+09:00 Asia/Yakutsk (DST)</option>
                <option value="Asia/Tokyo">+09:00 Japan, Korea</option>
                <option value="Australia/Darwin">+09:30 Australia/Darwin</option>
                <option value="Australia/Adelaide">+09:30 Australia/Adelaide (DST)</option>
                <option value="Australia/Brisbane">+10:00 Australia/Brisbane</option>
                <option value="Asia/Vladivostok">+10:00 Asia/Vladivostok (DST)</option>
                <option value="Australia/Sydney">+10:00 Australia/Sydney (DST)</option>
                <option value="Australia/Lord_Howe">+10:30 Australia/Lord_Howe (DST)</option>
                <option value="Asia/Kamchatka">+11:00 Asia/Kamchatka (DST)</option>
                <option value="Pacific/Noumea">+11:00 Pacific/Noumea</option>
                <option value="Pacific/Norfolk">+11:30 Pacific/Norfolk</option>
                <option value="Pacific/Auckland">+12:00 Pacific/Auckland (DST)</option>
                <option value="Pacific/Tarawa">+12:00 Pacific/Tarawa</option>
                <option value="Pacific/Chatham">+12:45 Pacific/Chatham (DST)</option>
                <option value="Pacific/Tongatapu">+13:00 Pacific/Tongatapu</option>
                <option value="Pacific/Apia">+13:00 Pacific/Apia (DST)</option>
                <option value="Pacific/Kiritimati">+14:00 Pacific/Kiritimati</option>
            </select>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-md">
            <table id="events-table" class="table table-striped">
                <thead>
                    <th>Event Name</th>
                    <th>Classification</th>
                    <th>Priority</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Recurring</th>
                    <th>Location</th>
                    <th></th>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>

    <div class="modal fade bd-example-modal-lg" id="add-event-modal" data-backdrop="static" tabindex="-1" role="dialog"
        aria-labelledby="event-modal-title" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="event-modal-title">Create Event</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form id="event-form" novalidate>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Event Name</label>
                            <span id="event-name-err" class="collapse error-msg"></span>
                            <input id="event-name" type="text" class="form-control" name="eventName" autocomplete="off">
                        </div>
                        <div class="form-group">
                            <label>Description (Optional)</label>
                            <span id="event-description-err" class="collapse error-msg"></span>
                            <textarea class="form-control" rows=5 name="eventDescription"
                                id="event-description"></textarea>
                        </div>

                        </label><BR>
                        <div class="form-row">
                            <div class="form-group col-md-4">
                                <label>Classification</label>
                                <select name="eventClass" id="event-class" class="form-control">
                                    <option value="PUBLIC" selected>Public (default)</option>
                                    <option value="PRIVATE">Private</option>
                                    <option value="CONFIDENTIAL">Confidential</option>
                                </select>
                            </div>
                            <div class="form-group col-md-2">
                                <label>Priority</label>
                                <select name="eventPrio" id="event-prio" class="form-control">
                                    <option value="0" selected>0 (default)</option>
                                    <option value="1">1 (highest)</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                    <option value="6">6</option>
                                    <option value="7">7</option>
                                    <option value="8">8</option>
                                    <option value="9">9 (lowest)</option>
                                </select>
                            </div>
                            <div class="form-check">
                                <label>RSVP</label>
                                <input id="event-rsvp" type="checkbox" class="form-control" name="eventRsvp">
                            </div>
                        </div>
                        <div id="rsvp-fields" class="collapse">
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <label>Organizer</label>
                                    <span id="organizer-err" class="collapse error-msg"></span>
                                    <input id="organizer" type="text" class="form-control" name="organizer"
                                        autocomplete="off">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>Attendees (each on newline)</label>
                                    <span id="attendees-err" class="collapse error-msg"></span>
                                    <textarea name="attendees" id="attendees" cols="80" rows="5" class="form-control"
                                        placeholder="jsmith@example.com&#10;janedoe@example.com&#10;..."
                                        autocomplete="off"></textarea>
                                </div>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>Date Start</label>
                                <span id="start-date-err" class="collapse error-msg"></span>
                                <div class="input-group">
                                    <input id="start-date" type="text" class="form-control readonly inherit-height"
                                        name="startDate" autocomplete="off">
                                    <div class="input-group-append">
                                        <button id="show-start-date-picker" class="btn btn-light border-grey"
                                            type="button">
                                            <img src="/assets/icons8-calendar-24.png">
                                        </button>
                                    </div>
                                </div>
                                <div id="start-date-picker"></div>
                            </div>
                            <div class="form-group col-md-6">
                                <label>Date End</label>
                                <span id="end-date-err" class="collapse error-msg"></span>
                                <div class="input-group">
                                    <input id="end-date" type="text" class="form-control readonly inherit-height"
                                        name="endDate" autocomplete="off">
                                    <div class="input-group-append">
                                        <button id="show-end-date-picker" class="btn btn-light border-grey"
                                            type="button">
                                            <img src="/assets/icons8-calendar-24.png">
                                        </button>
                                    </div>
                                </div>
                                <div id="end-date-picker"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Location</label>
                            <span id="event-location-err" class="collapse error-msg"></span>
                            <input id="event-location" type="text" class="form-control" name="eventLocation"
                                autocomplete="off">
                        </div>
                        <div class="form-group">
                            <label>Resources (Optional)</label>
                            <input id="event-resources" type="text" class="form-control" name="eventResources"
                                autocomplete="off" placeholder="e.g. Pen, paper, etc." />
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>Recurring</label>
                                <select class="custom-select mr-sm-2" id="event-recurring" name="eventRecurring">
                                    <option value="" selected>None</option>
                                    <option value="WEEKLY">Every Week</option>
                                    <option value="MONTHLY">Every Month</option>
                                    <option value="YEARLY">Every Year</option>
                                </select>
                            </div>

                            <div class="form-group col-md-6" style="display:none;">
                                <label>Recurring Exception</label>
                                <input id="event-recurring-exception" type="text" class="form-control"
                                    name="eventRecurringException" autocomplete="off"
                                    placeholder="e.g 1,12 separate by comma." />
                            </div>
                            <div class="form-group col-md-12" style="display:none;"><small id="passwordHelpBlock"
                                    class="form-text text-muted">Enter Recurring Exception value by number of week,
                                    month, year separate by comma.</span></div>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button id="form-reset-button" type="button" class="btn btn-light border-grey">Reset</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add Event</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

</div>
<script>
    const validatedFields = ['#event-name', '#start-date', '#end-date', '#event-location', '#organizer', '#attendees'];

    // Within elem, remove class target and add class replace
    function substituteClass(elem, target, replace) {
        $(elem).removeClass(target);
        $(elem).addClass(replace);
    }

    // Marks form field invalid and displays an error message
    function markInvalid(fieldName, msg) {
        $(fieldName).addClass('invalid');
        $(`${fieldName}-err`).html(msg);
        $(`${fieldName}-err`).show();
    }

    // Removes invalid styling on form field
    function markValid(fieldName) {
        $(fieldName).removeClass('invalid');
        $(`${fieldName}-err`).hide();
    }

    // Removes invalid styling from all form fields
    function clearInvalid() {
        validatedFields.forEach(field => {
            markValid(field);
        });
    }

    // Checks if all fields are valid
    function allValid() {
        let valid = true;
        validatedFields.forEach(field => {
            if ($(field).attr('class').includes('invalid')) {
                valid = false;
            }
        });
        return valid;
    }

    let download = (filename, text) => {
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
        element.setAttribute('download', filename);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }

    // Does not let any user input in text field
    // Used to combine both readonly and required
    $('.readonly').on('keydown paste', function (e) {
        e.preventDefault();
    });

    // Timezone data
    var tzData = "";

    // iCalendar Object
    var ical = new ICalendarGenerator();

    var startDatePicker, endDatePicker;
    $(document).ready(function () {


        // Sets the "Generate .ics" button to disabled
        // Prevents page refreshing from saving the state of the button if previously enabled
        $('#generate-button').prop('disabled', true);

        // Shows warning prompting user to add events and select a timezone
        $('#top-warning').show();

        // Sets the checkbox to unchecked
        $('#event-rsvp').prop('checked', false);

        // Gets ical VTIMEZONE data incase it the dropdown pre-filled from previous visit
        generateTzData();


        // Renders tables with class 'data-table' as a DataTable
        var eventTable = $('#events-table').DataTable({
            "dom": '<rt><"row"<"col"i>>',
            "lengthMenu": [[-1], ["All"]],
            "language": {
                "emptyTable": "No events added"
            }

        });

        $('#events-table').on('click', 'tbody td a.edit-event', function (e) {
            $tr = $(this).closest('tr');
            e.stopPropagation();
        });
        $('#events-table').on('click', 'tbody td a.delete-event', function (e) {
            $tr = $(this).closest('tr');
            let title = eventTable.row($tr).data()[0];
            let startDate = eventTable.row($tr).data()[3];
            console.log(startDate);
            ical.removeEvent(title, startDate);
            eventTable.row($tr).remove().draw(false);
            e.stopPropagation();
            if (ical.eventCount() == 0) {
                disableGenerate();
            }
        });


        // When the create event form is submitted
        $('#event-form').on('submit', function (e) {
            e.preventDefault();
            clearInvalid();

            let params = new URLSearchParams($(this).serialize());
            let eventName = params.get('eventName');
            let description = params.get('eventDescription');
            let location = params.get('eventLocation');
            let startDate = params.get('startDate');
            let endDate = params.get('endDate');
            let classification = params.get('eventClass');
            let priority = params.get('eventPrio');
            let resources = params.get('eventResources');
            let rsvp = params.get('eventRsvp') != null ? true : false;
            let organizer = params.get('organizer');
            let attendees = params.get('attendees');
            let recurring = params.get('eventRecurring');
            let recurring_exception = params.get('eventRecurringException');

            if (eventName.trim().length == 0) {
                // If event name is not filled in 
                markInvalid('#event-name', 'required');
            } else if (eventName.length > 50) {
                // If event name too long
                markInvalid('#event-name', 'must be less than 50 characters');
            } else if (eventName.match(/[@#$%^*`;]/g) != null) {
                // If event name contains specified special characters
                markInvalid('#event-name', 'should not contain @ # $ % ^ & * ` ;');
            }

            if (location.trim().length == 0) {
                // If event location is not filled in 
                markInvalid('#event-location', 'required');
            } else if (location.length > 50) {
                // If event length too long
                markInvalid('#event-location', 'must be less than 50 characters');
            } else if (location.match(/[@#$%^*`;]/g) != null) {
                // If event location contains specified special characters
                markInvalid('#event-location', 'should not contain @ # $ % ^ & * ` ;');
            }

            if (startDate.length == 0) {
                markInvalid('#start-date', 'required');
            } else if (moment(startDate, "MM-DD-YYYY HH:mm") < moment()) {
                // If start date is an event in the past
                markInvalid('#start-date', 'date/time should not be in the past');
            }

            if (endDate.length == 0) {
                markInvalid('#end-date', 'required');
            } else if (moment(startDate, "MM-DD-YYYY HH:mm") > moment(endDate, "MM-DD-YYYY HH:mm")) {
                // If start date begins after end date
                markInvalid('#end-date', 'date/time should be after start date');
            }

            if (rsvp && organizer.trim().length == 0) {
                markInvalid('#organizer', 'required if RSVP');
            } else if (rsvp && !matchEmailAddress(organizer)) {
                markInvalid('#organizer', 'invalid email address');
            }

            if (rsvp && attendees.trim().length == 0) {
                markInvalid('#attendees', 'required if RSVP');
            } else if (rsvp && !matchEmailAddress(attendees)) {
                markInvalid('#attendees', 'at least one attendee has invalid email address');
            }

            // If all necessary form fields are valid
            if (allValid()) {
                ical.addEvent(
                    eventName,
                    description,
                    location,
                    startDate,
                    endDate,
                    classification,
                    priority,
                    resources,
                    rsvp,
                    organizer,
                    attendees,
                    recurring,
                    recurring_exception
                );

                // Clear Form
                resetForm();

                // Push event data to event table
                eventTable.row.add([
                    eventName,
                    classification,
                    priority,
                    startDate,
                    endDate,
                    recurring,
                    location,
                    '<a href="#" class="delete-event" onclick="">Delete</a>',
                ]).draw(false);

                // Enable the generate button if disabled, since there now exists an event to generate an iCal file 
                if ($('#generate-button').prop('disabled') && $('#tz-select').val() != 0) {
                    enableGenerate();
                }
            }
        });

        // Window Date Picker configuration
        let wdpConfig = {
            dateType: 'MM/DD/YYYY',
            hourType: '24',
            orientation: false,
            inputToggle: true,
            type: 'DATEHOUR'
        };

        // Creates the WindowDatePicker for start date
         startDatePicker = new WindowDatePicker(Object.assign(wdpConfig, {
            el: '#start-date-picker',
            toggleEl: '#show-start-date-picker',
            inputEl: '#start-date',
        }));

        // Creates WindowDatePicker for end date
         endDatePicker = new WindowDatePicker(Object.assign(wdpConfig, {
            el: '#end-date-picker',
            toggleEl: '#show-end-date-picker',
            inputEl: '#end-date',
        }));

        // If end date/time is not yet selected at the time of selecting a start date/time,
        // the end date is auto-filled to be the same as the start date/time 
        startDatePicker.el.addEventListener('wdp.close', () => {
            if (endDatePicker.get().value == "" && startDatePicker.get().value != "") {
                let date = startDatePicker.get();
                endDatePicker.set(`${date.month}/${date.day + 1}/${date.year} ${date.hour}:${date.minute}`);
                // Fixes NaN error when selecting day before start of next month
                if (isNaN(endDatePicker.get().day)) {
                    endDatePicker.set(`${date.month + 1}/1/${date.year} ${date.hour}:${date.minute}`);
                }
            }
        });

        // Prompts the user if they are sure they want to leave as leaving clears all event data
        // Only prompts if at least one event was submitted
        window.onbeforeunload = function () {
            if (ical.eventCount() > 0) {
                return "Event data will be lost. Are you sure?"
            }
            return;
        };

        // Disables "Generate .ics" button if a timezone is not selected
        $('#tz-select').change(function () {
            let tz = $(this).val();
            generateTzData();
            if (tz != 0 && ical.eventCount() > 0) {
                enableGenerate();
            } else {
                disableGenerate();
            }
        });

        // Generates .ics file contents and allows it to be downloaded
        $('#generate-button').on('click', function (e) {
            download('ical.ics', ical.generateCal(tzData));
        });

        // Resets form on button click
        $('#form-reset-button').on('click', function (e) {
            resetForm();
        });

        $('#event-rsvp').change(function () {
            if ($(this).is(':checked')) {
                // Checkbox is checked
                $('#rsvp-fields').show();
            } else {
                // Checkbox is not checked
                $('#rsvp-fields').hide();
            }
        });

        // Resets form
        function resetForm() {
            clearInvalid();
            $('#event-form').trigger('reset');
            $('#rsvp-fields').hide();
            startDatePicker.get().value = "";
            endDatePicker.get().value = "";
        }

        // Disables "Generate .ics" button
        function disableGenerate() {
            $('#generate-button').prop('disabled', true);
            substituteClass('#generate-button', 'btn-primary', 'btn-outline-primary');
            $('#generate-button').prop('title', 'Add events and select timezone before generating');
            $('#top-warning').show();
        }

        // Allows "Generate .ics" button to be clicked
        function enableGenerate() {
            $('#generate-button').removeAttr('disabled');
            // Switches the button from outlined to filled in
            substituteClass('#generate-button', 'btn-outline-primary', 'btn-primary');
            $('#generate-button').prop('title', 'Click to generate .ics file');
            $('#top-warning').hide();
        }

        // Fetches iCal VTIMEZONE data from server
        function generateTzData() {
            let tz = $('#tz-select').val();
            if (tz != 0) {
                let http = new XMLHttpRequest();
                let url = `timezone.php?tz=${tz}`;

                http.open('GET', url);
                http.send();

                http.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        // Sets appropriate tzData
                        tzData = http.responseText;
                    }
                }
            } else {
                // Blanks tzData when "Select Timezone" option is active
                tzData = "";
            }
        }

        // Checks single and multiline strings if they match email address format
        // Returns true if all lines match, false if not
        function matchEmailAddress(email) {
            let addresses = email.split("\n").filter(line => {
                return line.length > 0;
            });
            let emailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/gm;
            let match = email.match(emailRegex);
            if (match == null) {
                return false;
            } else {
                return match.length == addresses.length;
            }
        }
    });
</script>
{% endblock content%}